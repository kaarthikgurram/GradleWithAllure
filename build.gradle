plugins {
    id 'java'
    id 'checkstyle'
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'io.qameta.allure' version '2.5' // Latest Plugin Version
}
allure {
    autoconfigure = true
    version = '2.17.3'  // Latest Allure Version
    useJUnit5 {
        version = '2.17.3' // Latest Allure Version
    }
}

sourceCompatibility = 1.8

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                outputs.upToDateWhen { false }
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

apply plugin: 'java';
apply plugin: 'checkstyle';

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    //Spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Selenium
    testImplementation "org.seleniumhq.selenium:selenium-java:4.0.0-alpha-6"

    // Rest assured
    testImplementation "io.rest-assured:rest-assured:4.3.0"
    testImplementation "io.rest-assured:json-path:4.3.0"
    testImplementation "io.rest-assured:xml-path:4.3.0"
    testImplementation "org.codehaus.groovy:groovy:3.0.6"

    //Junit
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    testImplementation group: 'org.json', name: 'json', version: '20090211'

    testImplementation group: 'io.qameta.allure', name: 'allure-gradle', version: '2.5'
}

test {
    useJUnitPlatform()
    doFirst {
        systemProperty 'spring.profiles.active', 'qa'
    }

    def testLocal = tasks.register("testLocal", Test) {
        useJUnitPlatform()
        doFirst {
            systemProperty 'spring.profiles.active', 'local'
        }
    }

    def testDev = tasks.register("testDev", Test) {
        useJUnitPlatform()
        doFirst {
            systemProperty 'spring.profiles.active', 'dev'
        }
    }

    def testQA = tasks.register("testQA", Test) {
        useJUnitPlatform()
        doFirst {
            systemProperty 'spring.profiles.active', 'qa'
        }
    }
}